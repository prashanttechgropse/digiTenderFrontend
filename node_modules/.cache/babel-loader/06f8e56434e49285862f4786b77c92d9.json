{"ast":null,"code":"import { apiendpoint } from \"../config.json\";\nimport httpService from \"./httpService\";\nimport { toast } from \"react-toastify\";\nexport async function setUpProfileService(formData) {\n  try {\n    const {\n      data\n    } = await httpService.post(`${apiendpoint}/setUpProfile`, formData);\n    toast.success(data.message);\n    if (!data.message) toast.success(data);\n    return data;\n  } catch (error) {\n    if (error.response) toast.error(error.response.data);\n    return error;\n  }\n}\nexport async function authentication(formData) {\n  try {\n    const {\n      data,\n      headers\n    } = await httpService.post(`${apiendpoint}/login`, {\n      email: formData.email,\n      password: formData.password\n    });\n    localStorage.setItem(\"token\", headers[\"x-auth-token\"]);\n    toast.success(data.message);\n    if (!data.message) toast.success(data);\n    return data.profileType;\n  } catch (error) {\n    if (error.response) toast.error(error.response.data);\n    return error;\n  }\n}\nexport async function createAccount(formData) {\n  try {\n    await httpService.post(`${apiendpoint}/register`, formData);\n    await httpService.post(`${apiendpoint}/otpGeneration`, {\n      email: formData.email\n    });\n  } catch (error) {\n    if (error.response) toast.error(error.response.data);\n    return error;\n  }\n}\nexport async function otpVerification(formData, email) {\n  try {\n    const {\n      data,\n      headers\n    } = await httpService.post(`${apiendpoint}/otpVerification`, {\n      email: email,\n      otp: formData.otp\n    });\n    localStorage.setItem(\"token\", headers[\"x-auth-token\"]);\n    toast.success(data.message);\n    if (!data.message) toast.success(data);\n    return data;\n  } catch (error) {\n    if (error.response) toast.error(error.response.data);\n    return error;\n  }\n}","map":{"version":3,"sources":["/Users/prashantkansal/Desktop/techgropse/digiTender/digiTenderFrontend/src/services/registerServices.js"],"names":["apiendpoint","httpService","toast","setUpProfileService","formData","data","post","success","message","error","response","authentication","headers","email","password","localStorage","setItem","profileType","createAccount","otpVerification","otp"],"mappings":"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","sourcesContent":["import { apiendpoint } from \"../config.json\";\nimport httpService from \"./httpService\";\nimport { toast } from \"react-toastify\";\n\nexport async function setUpProfileService(formData) {\n  try {\n    const { data } = await httpService.post(\n      `${apiendpoint}/setUpProfile`,\n      formData\n    );\n    toast.success(data.message);\n    if (!data.message) toast.success(data);\n    return data;\n  } catch (error) {\n    if (error.response) toast.error(error.response.data);\n    return error;\n  }\n}\n\nexport async function authentication(formData) {\n  try {\n    const { data, headers } = await httpService.post(`${apiendpoint}/login`, {\n      email: formData.email,\n      password: formData.password,\n    });\n    localStorage.setItem(\"token\", headers[\"x-auth-token\"]);\n    toast.success(data.message);\n    if (!data.message) toast.success(data);\n    return data.profileType;\n  } catch (error) {\n    if (error.response) toast.error(error.response.data);\n    return error;\n  }\n}\n\nexport async function createAccount(formData) {\n  try {\n    await httpService.post(`${apiendpoint}/register`, formData);\n    await httpService.post(`${apiendpoint}/otpGeneration`, {\n      email: formData.email,\n    });\n  } catch (error) {\n    if (error.response) toast.error(error.response.data);\n    return error;\n  }\n}\n\nexport async function otpVerification(formData, email) {\n  try {\n    const { data, headers } = await httpService.post(\n      `${apiendpoint}/otpVerification`,\n      {\n        email: email,\n        otp: formData.otp,\n      }\n    );\n\n    localStorage.setItem(\"token\", headers[\"x-auth-token\"]);\n    toast.success(data.message);\n    if (!data.message) toast.success(data);\n    return data;\n  } catch (error) {\n    if (error.response) toast.error(error.response.data);\n    return error;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}