{"ast":null,"code":"import axios from \"axios\";\nimport { toast } from \"react-toastify\";\n\nconst successCallBack = success => {\n  toast.info(success.data.message);\n};\n\nconst errorCallBack = error => {\n  const expectedError = error.response && error.response.status >= 404 && error.response.status < 500;\n\n  if (!expectedError) {\n    console.log(\"logging the error\", error);\n    toast.error(\"an unexpected error occured\");\n  }\n\n  return Promise.reject(error);\n}; //intercept errors while communicating with backend server\n\n\naxios.interceptors.response.use(successCallBack, errorCallBack);\nexport default {\n  get: axios.get,\n  post: axios.post,\n  put: axios.put,\n  delete: axios.delete\n};","map":{"version":3,"sources":["/Users/prashantkansal/Desktop/techgropse/digiTender/digiTenderFrontend/src/services/httpService.js"],"names":["axios","toast","successCallBack","success","info","data","message","errorCallBack","error","expectedError","response","status","console","log","Promise","reject","interceptors","use","get","post","put","delete"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,gBAAtB;;AACA,MAAMC,eAAe,GAAIC,OAAD,IAAa;AACnCF,EAAAA,KAAK,CAACG,IAAN,CAAWD,OAAO,CAACE,IAAR,CAAaC,OAAxB;AACD,CAFD;;AAIA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,QAAMC,aAAa,GACjBD,KAAK,CAACE,QAAN,IACAF,KAAK,CAACE,QAAN,CAAeC,MAAf,IAAyB,GADzB,IAEAH,KAAK,CAACE,QAAN,CAAeC,MAAf,GAAwB,GAH1B;;AAIA,MAAI,CAACF,aAAL,EAAoB;AAClBG,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCL,KAAjC;AACAP,IAAAA,KAAK,CAACO,KAAN,CAAY,6BAAZ;AACD;;AACD,SAAOM,OAAO,CAACC,MAAR,CAAeP,KAAf,CAAP;AACD,CAVD,C,CAYA;;;AACAR,KAAK,CAACgB,YAAN,CAAmBN,QAAnB,CAA4BO,GAA5B,CAAgCf,eAAhC,EAAiDK,aAAjD;AAEA,eAAe;AACbW,EAAAA,GAAG,EAAElB,KAAK,CAACkB,GADE;AAEbC,EAAAA,IAAI,EAAEnB,KAAK,CAACmB,IAFC;AAGbC,EAAAA,GAAG,EAAEpB,KAAK,CAACoB,GAHE;AAIbC,EAAAA,MAAM,EAAErB,KAAK,CAACqB;AAJD,CAAf","sourcesContent":["import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nconst successCallBack = (success) => {\n  toast.info(success.data.message);\n};\n\nconst errorCallBack = (error) => {\n  const expectedError =\n    error.response &&\n    error.response.status >= 404 &&\n    error.response.status < 500;\n  if (!expectedError) {\n    console.log(\"logging the error\", error);\n    toast.error(\"an unexpected error occured\");\n  }\n  return Promise.reject(error);\n};\n\n//intercept errors while communicating with backend server\naxios.interceptors.response.use(successCallBack, errorCallBack);\n\nexport default {\n  get: axios.get,\n  post: axios.post,\n  put: axios.put,\n  delete: axios.delete,\n};\n"]},"metadata":{},"sourceType":"module"}